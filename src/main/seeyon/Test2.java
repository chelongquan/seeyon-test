package main.seeyon;


import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.sun.deploy.util.StringUtils;
import com.sun.javafx.collections.MappingChange;
import javafx.beans.binding.Bindings;
import org.apache.commons.collections4.CollectionUtils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Test2 {
	
	
	public static void main(String[] args) {
//		CompletableFuture.supplyAsync(() -> {
//            try {
//                Thread.sleep(2000);
//            } catch (InterruptedException e) {
//                e.printStackTrace();
//            }
//            return "hello";
//        });
//        while (true){}
		
//		  GregorianCalendar calendar = new GregorianCalendar();
//          calendar.setTime(new Date());
////          calendar.add(2, -1);
//          System.out.println(calendar.get(2)+1);
//		Calendar now = Calendar.getInstance();
//		System.out.println(now.get(Calendar.MONTH));
		
		Map<Long, String> m = new HashMap<>();
		m.put(1L,"1" );
		m.put(2L,"1" );
		m.put(3L,"1" );
		m.put(4L,"1" );
		Iterator<Map.Entry<Long, String>> it = m.entrySet().iterator();
		while (it.hasNext()) {
			Map.Entry<Long, String> entry = it.next();
			if(entry.getKey() == 2L) {
				it.remove();
				m.remove(2L);
			}

		}
//		System.out.println(m);
//		String [] a  = "15441716811324,15027865615416,15137475942289,15137475942289,15137475942289,15137475942289,159723900740837,14495654894356,148016675538928,14476575214673,158398058261657,147494693405314,-3629976620321651259,159722023591121,-293777329855248014,158398045221923,159722023591121,159722023591121,14510096338590,14510096338590,148127506693610,159722023591121,159722023591121,14749473398801,14519806053200,14873171634893,157889265363713,158520422204115,157889274476922,15571108926939,148385962099276,15021838968650,15021837973320,149742623076272,15890892506426,15530674471250,14749473582538,15890901360843,159297079816020,14830032839943,14510291499323,-4122553149324113458,-150637588791212253,-9220378207338085187,15021838968650,15021838968650,15021838968650,15021838968650,15264373616080,14509468370655,145094683706511,15530674471250,158398058261657,158398058261657,158398058261657,14684793132270,15113364895884,15113364895884,158398058261657,158398058261657,158398058261657,1523864728368218,1592307198972191,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,15308671623467,159797520527594,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,158398049021135,14685677711940,159797520527594,7692666900033719276,159340144324794,15825338466614,1592736375931204,148385962099276,15045149635500,15890837106390,148127506693610,1592749224538265,159186428934320,15882577823471,14902639824644,159886419029612,1593595294477221,147971767315911,15609100054920,156974177888630,15825338545807,149742529540159,158253424840253,15864105821840,14749466237181,152652843648113,152652843648113,14749466237181,1592749752212336,14684644667500,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046973980,14684644667500,15858046973980,15858046607810,15858046973980,1595585338722161,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,159886419029612,15858046607810,15858046973980,15858046973980,146018492022928,15858046973980,15858046973980,15858046607810,15858046607810,15858046607810,15858046607810,15858046607810,15858046607810,15858046607810,15858046973980,15858046607810,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046607810,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046607810,15458763253300,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15458763253300,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,1592210117588125,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15458763253300,15858046973980,15858046973980,15858046607810,15858046973980,15858046973980,15858046607810,15858046607810,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,159886419029612,15858046607810,15858046973980,15858046973980,14812750540017,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15864105821840,158253424840253,15858046973980,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,14510291499323,15858046973980,15858046973980,15858046973980,15858046973980,14510291499323,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,149819661440027,15837388786060,15794245153527,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,14749466237181,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,154112827079610,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,14510096338590,15858046973980,15858046973980,15858046607810,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15513265049483,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,14749466237181,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046607810,15858046973980,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,158952641411477,158952645931689,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,152652843648113,152533016127412,15858046973980,15858046973980,15858046607810,15858046607810,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,158952614684429,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,152652843648113,152533016127412,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,14812750540017,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,154112827079610,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,15858046973980,152533016127412,152652843648113,15858046973980,15864105821840,158253424840253,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,15858046607810,15858046973980,15858046973980,15858046973980,152652843648113,159886419029612,144884920550722,149819661440027,15837388786060,15794245153527,15675658715004,15675658715017,156756587150110,4668136076725145067,15530668958810,146018450281318,150174359970825,1592751046113163,14749466237181,-37161006316564728,770213156152691962,-5617623679787054866,-1011847769426801047,8734335358903404377,5602222132506742537,-6905572075294535704,-5850075913625776491,3871713422764687728,7085580903270204456,-3691855203921082078,3024130904959307183,2368659968869220777,150174359970825,1592751046113163,815340942130823880,-3515425238867491003,-4783431328678788301,5929800230947866241,438657608914128854,-802927421922523477,-6023004654192275969,6986563873862404799,-7003292865006580705,-248462988245449104,59800408880726665,5047376629525860327,-74493101220278306,-479846666932696934,-2382916001356037353,6343742020373465448,-7987567144865805844,-4112503194844837087,-7830736318728617888,3796425308090615658,7495467186246338072,1462113097497857424,-2780079985727814207,-5809223605729015734,3274966892214372507,2908674462607230386,-5264954425208586003,1574682472647706603,-7636495307909217250,-437169216170472826,-7276444999999336800,8300337012699644711,14804773947780,14804773947792,151695504912416,152568529246530,14931055255940,1592926148517204,1592926148518205,14495654894356,159842560991729,150407073746584,159722023591121,15825338466614,15399409687160,15027865615416,15117756856043,159340144324794,159340144324794,15399409687160,14685677711940,15362109722860,14763521138940,14763521138940,15362109722860,14685677711940,15890901360843,14763521138940,15362109722860,14685677711940,14685677711940,15027865615416,149320316952630,159798098781124,-260982632565357099,-7435657723643474947,14749473398801,14785859169750,1523864728368218,1592307124750184,1592210020553118,14749473582538,151123107053423,159797520527594,15009544946582,147971767315911,15112299558558,15571107657080,15571107657080,14749473582538,15027865615416,159462538183679,157170778014129,1592211198806165,15027865615416,1592211198806165,15027864480680,1523864728368218,14749473398801,1523864728368218,1593595371701223,1593595371701223,1593595371701223,3896269637997774830,-6140289694013111119,159211854727541,15138411989430,148127506693610,148127506693610,1593670920085182,15112299558558,15112299558558,15107290552937,15107290552937,15109083654953,148127506693610,148127506693610,159722023591121,1593670920085182,1593670920085182,158398045221819,15839800547371,14749473582538,15027864480680,15027864480680,15027864480680,-1257745523198702490,1592736928909214,159722023591121,1592736928909215,1593401046326113,159722023591121,159722023591121,159722023591121,14978367669763,159722023591121,159722023591121,148127506693610,15978196826405,159420117245970,159420117245970,147971782979132,1483860525658110,148385904324127,149794407815635,14978367669763,15027864480680,1592120449040110,148015086956779,14780485005067,14730405139804,151738904467214,151738904467214,151738904467214,14730405139804,151971891063817,142545552106920".split(",");
		
//		List<Long> tt= new ArrayList();
//		tt.add(1L);tt.add(12L);tt.add(2L);tt.add(1L);
//		
//		List<Long> b = distinctList(tt);
//		System.out.println(b);
//		String orgId = "3008678938724286931#-6321572047449928785";
//		if(orgId.indexOf("#")>=0 && orgId.matches("[\\s[-0-9]#]*")){
//			String[] ids = orgId.split("#");
//			if(ids.length>=2){
//				orgId=ids[1];
//			}
//		}
//		System.out.println(orgId);
//				List<Long> tt= new ArrayList();
//				tt.add(123123L);
//				tt.add(12L);tt.add(2L);tt.add(1L);
//		splitSqlByStrLong(" rptSend.send_Department_Id", tt);

//		StringBuilder h = new StringBuilder(50);
//		h.substring(0, -3);

//
//		Map _map = new HashMap();
//		_map.put("1", 1);
//		_map.put("2", 1);
//		_map.put("3", 1);
//		_map.put("4", 1);
//		_map.put("1_uid", 1);
//		_map.put("2_uid", 1);
//		_map.put("3_uid", 1);
//		Set<String> keys = _map.keySet();
//		keys.parallelStream().filter(k-> !k.endsWith("_uid")).forEach(k -> {
//			System.out.println(k);
//		});
		
//		demoWfanalysis();
		
//		mapChunk();
//		List<Integer> a = Lists.newArrayList();
//		for (int i = 0; i < 900; i++) {
//			a.add(i);
//		}
//
//		List<List<Integer>> lists = splitList(a, 900);
//		System.out.println(lists.size());
		
//		System.out.println(mapToString(_map,"&","="));
		
	}
	
 
	/**
	 * Map转String工具
	 * @param map
	 * @param separator 分隔符
	 * @param kvSplice 键值拼接符
	 * @return
	 */
	public static String mapToString(Map<String, Object> map, String separator, String kvSplice) {
		List result = new ArrayList<>();
		map.entrySet().parallelStream().reduce(result, (first, second)->{
			Object val = second.getValue();
			if(val == null){
				val="";
			}
			first.add(second.getKey() + kvSplice + val);
			return first;
		}, (first, second)->{
			if (first == second) {
				return first;
			}
			first.addAll(second);
			return first;
		});
		return StringUtils.join(result, separator);
	}
	
	private static void demoWfanalysis(){
		Map _map = new HashMap();
		_map.put("1", 1);
		_map.put("2", 1);
		_map.put("3", 3);
		_map.put("4", 4);
		
		Map _map1 = new HashMap();
		_map1.put("1", 1);
		_map1.put("2", 1);
		_map1.put("5", 5);
		_map1.put("6", 6);
		
		Map _map2 = new HashMap();
		_map2.put("1", 1);
		_map2.put("2", 1);
		_map2.put("7", 7);
		_map2.put("8", 8);
		Map _map3 = new HashMap();
		_map3.put("1", 2);
		_map3.put("2", 2);
		_map3.put("9", 9);
		_map3.put("10", 10);
		Map _map4 = new HashMap();
		_map4.put("1", 2);
		_map4.put("2", 2);
		_map4.put("11", 11);
		_map4.put("12", 12);
		Map _map5 = new HashMap();
		_map5.put("1", 1);
		_map5.put("2", 1);
		_map5.put("13", 13);
		_map5.put("14", 14);
		
		List<Map> L1 = Lists.newArrayList(_map,_map1);
		List<Map> L2 =Lists.newArrayList(_map2,_map3);
		List<Map> L3 = Lists.newArrayList(_map4,_map5);
		
		// list转map
		Map<String, Map> m1 = getDataMap(L1);
		Map<String, Map> m2 = getDataMap(L2);
		Map<String, Map> m3 = getDataMap(L3);
		// java8 list转map
		List<Map> list = Lists.newArrayList(_map,_map1,_map2,_map3,_map4,_map5);
		Map<String, Map> mapAll = list.stream().collect(Collectors.toMap(m->{return m.get("1")+"_"+m.get("2");}, u -> u,(tmp1,tmp2)->{
			tmp1.putAll(tmp2);
			return tmp1;
		}));
		System.out.println(mapAll);
//
		
//		Map<String, Map> all = Maps.newHashMap();
//		getAll(all,m1);
//		getAll(all,m2);
//		getAll(all,m3);
//		System.out.println(all);
		
		// 使用java8-->Stream.concat
//		Map<String, Map> result = Stream.concat(m1.entrySet().stream(), m2.entrySet().stream())
//				.collect(Collectors.toMap(
//						Map.Entry::getKey,
//						Map.Entry::getValue,
//						(tmp1, tmp2) ->  {
//							tmp1.putAll(tmp2);
//							return tmp1;
//						}));
//		System.out.println(result);
	}
	
	
	private static void getAll (Map<String, Map> all, Map<String, Map> m1){
		if(CollectionUtils.isNotEmpty(m1.keySet())){
			for (String s : m1.keySet()) {
				Map allVal = all.get(s);
				if(allVal==null){
					allVal = Maps.newHashMap();
				}
				allVal.putAll(m1.get(s));
				all.put(s,allVal);
			}
		}
	}
	
	private static Map<String, Map> getDataMap (List<Map> data){
		Map<String, Map> m1 = Maps.newHashMap();
		if(CollectionUtils.isNotEmpty(data)){
			for (Map map : data) {
				String k = map.get("1")+"_"+map.get("2");
				Map v = m1.get(k);
				if(v==null){
					v = Maps.newHashMap();
				}
				v.putAll(map);
				m1.put(k, v);
			}
		}
		return m1;
	}
	
	public static <T> List<List<T>> splitList(List<T> list, int len) {
		if (list == null || list.size() == 0 || len < 1) {
			return null;
		}
		
		List<List<T>> result = new ArrayList<List<T>>();
		int size = list.size();
		int count = (size + len - 1) / len;
		for (int i = 0; i < count; i++) {
			List<T> subList = list.subList(i * len, ((i + 1) * len > size ? size : len * (i + 1)));
			result.add(subList);
		}
		return result;
	}
	/**
	 * 去除重复数据
	 * 由于Set的无序性，不会保持原来顺序
	 * @param list
	 */
	public static <T> List distinctList(List<T> list) {
		final boolean sta = null != list && list.size() > 0;
		if (sta) {
			Set<T> set = new HashSet<T>(list);
			List<T> doubleList= new ArrayList();
			doubleList.addAll(set);
			return doubleList;
		}
		return null;
	}
	
	public static String splitSqlByStrLong(String keyHql,List<Long> ids){
		StringBuilder h = new StringBuilder(50);
		int len = (ids.size() % 900) == 0 ? ids.size()/900:ids.size()/900+1;
		for(int i = 1;i<= len ;i++){
			if(ids.size() > i*900){
				h.append(keyHql).append(" in (").append(StringUtils.join(ids.subList((i-1)*900, (i)*900),",")).append(") or ");
			}else{
				h.append(keyHql).append(" in (").append(StringUtils.join(ids.subList((i-1)*900, ids.size()),",")).append(") or ");
			}
		}
		return h.substring(0, h.length()-3);
	}
	
	
	private static void mapChunk(){
		Map _map = new HashMap();
		_map.put("1", 1);
		_map.put("2", 1);
		_map.put("3", 3);
		_map.put("4", 4);
		_map.put("5", 5);
		_map.put("6", 6);
		_map.put("7", 7);
		System.out.println(mapChunk(_map,2));
	}
	/**
	 * 将map 拆分成多个map
	 *
	 * @param chunkMap 被拆的 map
	 * @param chunkNum 每段的大小
	 * @param <k>      map 的 key类 型
	 * @param <v>      map 的value 类型
	 * @return List
	 */
	public static <k, v> List<Map<k, v>> mapChunk(Map<k, v> chunkMap, int chunkNum) {
		if (chunkMap == null || chunkNum <= 0) {
			List<Map<k, v>> list = new ArrayList<>();
			list.add(chunkMap);
			return list;
		}
		Set<k> keySet = chunkMap.keySet();
		Iterator<k> iterator = keySet.iterator();
		int i = 1;
		List<Map<k, v>> total = new ArrayList<>();
		Map<k, v> tem = new HashMap<>();
		while (iterator.hasNext()) {
			k next = iterator.next();
			tem.put(next, chunkMap.get(next));
			if (i == chunkNum) {
				total.add(tem);
				tem = new HashMap<>();
				i = 0;
			}
			i++;
		}
		if (!CollectionUtils.isEmpty(Collections.singleton(tem))) {
			total.add(tem);
		}
		return total;
	}
}
